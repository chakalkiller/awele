/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.57).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.RestBoard;
import io.swagger.model.RestPlayer;
import io.swagger.model.RestTabScore;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-06-06T18:38:09.606973459Z[GMT]")
@Validated
public interface AweleApi {

    @Operation(summary = "", description = "log a player", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "player id", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Integer.class))) })
    @RequestMapping(value = "/awele/connect",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Integer> connect(@Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "name", required = false) String name
);


    @Operation(summary = "", description = "logout a player", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "ok ?", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/awele/deconnect",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<String> deconnect(@Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "playerId", required = false) Integer playerId
);


    @Operation(summary = "", description = "return the Holes", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RestBoard.class))) })
    @RequestMapping(value = "/awele/board",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<RestBoard> getBoard();


    @Operation(summary = "", description = "return a Player", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RestPlayer.class))) })
    @RequestMapping(value = "/awele/player",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<RestPlayer> getPlayer(@Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "id", required = false) Integer id
);


    @Operation(summary = "", description = "return the array of Scores", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Scores", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RestTabScore.class))) })
    @RequestMapping(value = "/awele/score",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<RestTabScore> getScore(@Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "name", required = false) String name
);


    @Operation(summary = "", description = "return the state of the play", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "-1, not run, 0=run, 1=player1 win, 2=player2 win, 3=both", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Integer.class))) })
    @RequestMapping(value = "/awele/state",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Integer> getState();


    @Operation(summary = "", description = "return which player must play", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Player to play", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RestPlayer.class))) })
    @RequestMapping(value = "/awele/turn",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<RestPlayer> getTurn();


    @Operation(summary = "", description = "sow a hole for a specified player", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Integer.class))),
        
        @ApiResponse(responseCode = "404", description = "error message", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/awele/sow",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Integer> sow(@Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "hole", required = false) Integer hole
, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "id", required = false) Integer id
);


    @Operation(summary = "", description = "start the game if stopped or stop it if started", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/awele/startstop",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<String> startstop(@Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "id", required = false) Integer id
);

}

